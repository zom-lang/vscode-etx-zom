{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Zom",
    "fileTypes": [
        "zom"
    ],
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numerics"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.default.zom",
					"match": "\\b(const|var|func|in|scheme)\\b"
				},
				{
					"match": "\\b(while|for|loop)\\b",
					"name": "keyword.control.repeat.zom"
				},
				{
					"name": "keyword.storage.zom",
					"match": "\\b(extern|packed|pub|comptime)\\b"
				},
				{
					"name": "keyword.structure.zom",
					"match": "\\b(struct|enum)\\b"
				},
				{
					"name": "keyword.control.flow.zom",
					"match": "\\b(break|return|continue)\\b"
				},
				{
					"name": "keyword.control.conditional.zom",
					"match": "\\b(if|else)\\b"
				},

				{
					"name": "keyword.constant.default.zom",
					"match": "\\b(undefined)\\b"
				},
				{
					"name": "keyword.constant.bool.zom",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "keyword.type.zom",
					"match": "\\b(bool|void|type|str)\\b"
				},
				{
					"name": "keyword.type.integer.zom",
					"match": "\\b(i8|i16|i32|i64|i128|u8|u16|u32|u64|u128|f16|f32|f64|f128)\\b"
				},


				{
					"comment": "zom operators (TODO: add operators of the RFC 0004)",
					"name": "keyword.operator.zom",
					"match": "\\s+(\\+|\\-|\\*|\\/|\\%|\\^)\\s+"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.zom",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.zom",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"comment": "empty comment",
					"name": "comment.block.zom",
					"match": "\\/\\*\\*\\/",
					"patterns": [
						{
						  "include": "#commentContents"
						}
					]
				},
				{
					"comment": "zomdoc comment",
					"name": "comment.block.documentation.zom",
					"begin": "\\/\\/(\\!|\\/) ",
					"end": "\n",
					"patterns": [
						{ "include": "#comments" },
						{ "include": "#commentContents" }
					]
				},
				{
					"comment": "block comment",
					"name": "comment.block.zom",
					"begin": "\\/\\*",
					"end": "\\*\\/",
					"patterns": [
						{ "include": "#comments" },
						{ "include": "#commentContents"}
					]
				},
				{
					"comment": "line comment zom",
					"name": "comment.line.double-slash.zom",
					"begin": "//",
					"end": "\n",
					"patterns": [
						{
						  "include": "#commentContents"
						}
					]
				}
			]
		},
		"commentContents": {
		  "patterns": [
			{
			  "match": "\\b(TODO|FIXME|XXX|NOTE)\\b:?",
			  "name": "keyword.todo.zom"
			}
		  ]
		},
		"numerics": {
			"name": "constant.numeric.zom",
			"match": "\\d+[.[\\d]+]?"
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.language.zom",
					"match": "\\b(self)\\b"
				},
				{
					"name": "variable.name.zom",
					"match": "[a-z0-9_]\\w+"
				},
				{
					"name": "meta.definition.variable",
					"match": "[A-Z]\\w+"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function.scheme.zom",
					"match": "@\\w+(\\(|\\[|\\{)"
				},
				{
					"name": "entity.name.function.zom",
					"match": "(?!@)\\w+\\s*\\("
				}
			]
		}
	},
	"scopeName": "source.zom"
}